/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppPortrait {
    }
    interface AppRoot {
    }
    interface ColorPaletteInput {
    }
    interface ColorPickerInput {
        "data": {title:string,init:string};
        "onValueChange": Function;
    }
    interface ColorTab {
    }
    interface DrawTab {
    }
    interface DropdownInput {
        "data": {title:string, items: string[]};
        "onValueChange": Function;
    }
    interface GridTab {
    }
    interface KnightTab {
    }
    interface PortraitImage {
        "simulation_params": any;
    }
    interface PortraitSettings {
    }
    interface RadioButtonInput {
        "data": {title:string, items: string[]};
        "onValueChange": Function;
    }
    interface SliderInput {
        "data": {min:number,max:number,init:number,title:string};
        "onValueChange": Function;
    }
    interface WeaveTab {
    }
}
declare global {
    interface HTMLAppPortraitElement extends Components.AppPortrait, HTMLStencilElement {
    }
    var HTMLAppPortraitElement: {
        prototype: HTMLAppPortraitElement;
        new (): HTMLAppPortraitElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLColorPaletteInputElement extends Components.ColorPaletteInput, HTMLStencilElement {
    }
    var HTMLColorPaletteInputElement: {
        prototype: HTMLColorPaletteInputElement;
        new (): HTMLColorPaletteInputElement;
    };
    interface HTMLColorPickerInputElement extends Components.ColorPickerInput, HTMLStencilElement {
    }
    var HTMLColorPickerInputElement: {
        prototype: HTMLColorPickerInputElement;
        new (): HTMLColorPickerInputElement;
    };
    interface HTMLColorTabElement extends Components.ColorTab, HTMLStencilElement {
    }
    var HTMLColorTabElement: {
        prototype: HTMLColorTabElement;
        new (): HTMLColorTabElement;
    };
    interface HTMLDrawTabElement extends Components.DrawTab, HTMLStencilElement {
    }
    var HTMLDrawTabElement: {
        prototype: HTMLDrawTabElement;
        new (): HTMLDrawTabElement;
    };
    interface HTMLDropdownInputElement extends Components.DropdownInput, HTMLStencilElement {
    }
    var HTMLDropdownInputElement: {
        prototype: HTMLDropdownInputElement;
        new (): HTMLDropdownInputElement;
    };
    interface HTMLGridTabElement extends Components.GridTab, HTMLStencilElement {
    }
    var HTMLGridTabElement: {
        prototype: HTMLGridTabElement;
        new (): HTMLGridTabElement;
    };
    interface HTMLKnightTabElement extends Components.KnightTab, HTMLStencilElement {
    }
    var HTMLKnightTabElement: {
        prototype: HTMLKnightTabElement;
        new (): HTMLKnightTabElement;
    };
    interface HTMLPortraitImageElement extends Components.PortraitImage, HTMLStencilElement {
    }
    var HTMLPortraitImageElement: {
        prototype: HTMLPortraitImageElement;
        new (): HTMLPortraitImageElement;
    };
    interface HTMLPortraitSettingsElement extends Components.PortraitSettings, HTMLStencilElement {
    }
    var HTMLPortraitSettingsElement: {
        prototype: HTMLPortraitSettingsElement;
        new (): HTMLPortraitSettingsElement;
    };
    interface HTMLRadioButtonInputElement extends Components.RadioButtonInput, HTMLStencilElement {
    }
    var HTMLRadioButtonInputElement: {
        prototype: HTMLRadioButtonInputElement;
        new (): HTMLRadioButtonInputElement;
    };
    interface HTMLSliderInputElement extends Components.SliderInput, HTMLStencilElement {
    }
    var HTMLSliderInputElement: {
        prototype: HTMLSliderInputElement;
        new (): HTMLSliderInputElement;
    };
    interface HTMLWeaveTabElement extends Components.WeaveTab, HTMLStencilElement {
    }
    var HTMLWeaveTabElement: {
        prototype: HTMLWeaveTabElement;
        new (): HTMLWeaveTabElement;
    };
    interface HTMLElementTagNameMap {
        "app-portrait": HTMLAppPortraitElement;
        "app-root": HTMLAppRootElement;
        "color-palette-input": HTMLColorPaletteInputElement;
        "color-picker-input": HTMLColorPickerInputElement;
        "color-tab": HTMLColorTabElement;
        "draw-tab": HTMLDrawTabElement;
        "dropdown-input": HTMLDropdownInputElement;
        "grid-tab": HTMLGridTabElement;
        "knight-tab": HTMLKnightTabElement;
        "portrait-image": HTMLPortraitImageElement;
        "portrait-settings": HTMLPortraitSettingsElement;
        "radio-button-input": HTMLRadioButtonInputElement;
        "slider-input": HTMLSliderInputElement;
        "weave-tab": HTMLWeaveTabElement;
    }
}
declare namespace LocalJSX {
    interface AppPortrait {
    }
    interface AppRoot {
    }
    interface ColorPaletteInput {
        "onOn_palette_select"?: (event: CustomEvent<string>) => void;
    }
    interface ColorPickerInput {
        "data"?: {title:string,init:string};
        "onValueChange"?: Function;
    }
    interface ColorTab {
        "onOn_color_input_change"?: (event: CustomEvent<any>) => void;
    }
    interface DrawTab {
    }
    interface DropdownInput {
        "data"?: {title:string, items: string[]};
        "onValueChange"?: Function;
    }
    interface GridTab {
        "onOn_grid_input_change"?: (event: CustomEvent<any>) => void;
    }
    interface KnightTab {
        "onOn_knight_input_change"?: (event: CustomEvent<any>) => void;
    }
    interface PortraitImage {
        "simulation_params"?: any;
    }
    interface PortraitSettings {
        "onOn_color_list_toggle"?: (event: CustomEvent<any>) => void;
        "onOn_update_user_input_params"?: (event: CustomEvent<Object>) => void;
    }
    interface RadioButtonInput {
        "data"?: {title:string, items: string[]};
        "onValueChange"?: Function;
    }
    interface SliderInput {
        "data"?: {min:number,max:number,init:number,title:string};
        "onValueChange"?: Function;
    }
    interface WeaveTab {
        "onOn_weave_input_change"?: (event: CustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "app-portrait": AppPortrait;
        "app-root": AppRoot;
        "color-palette-input": ColorPaletteInput;
        "color-picker-input": ColorPickerInput;
        "color-tab": ColorTab;
        "draw-tab": DrawTab;
        "dropdown-input": DropdownInput;
        "grid-tab": GridTab;
        "knight-tab": KnightTab;
        "portrait-image": PortraitImage;
        "portrait-settings": PortraitSettings;
        "radio-button-input": RadioButtonInput;
        "slider-input": SliderInput;
        "weave-tab": WeaveTab;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-portrait": LocalJSX.AppPortrait & JSXBase.HTMLAttributes<HTMLAppPortraitElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "color-palette-input": LocalJSX.ColorPaletteInput & JSXBase.HTMLAttributes<HTMLColorPaletteInputElement>;
            "color-picker-input": LocalJSX.ColorPickerInput & JSXBase.HTMLAttributes<HTMLColorPickerInputElement>;
            "color-tab": LocalJSX.ColorTab & JSXBase.HTMLAttributes<HTMLColorTabElement>;
            "draw-tab": LocalJSX.DrawTab & JSXBase.HTMLAttributes<HTMLDrawTabElement>;
            "dropdown-input": LocalJSX.DropdownInput & JSXBase.HTMLAttributes<HTMLDropdownInputElement>;
            "grid-tab": LocalJSX.GridTab & JSXBase.HTMLAttributes<HTMLGridTabElement>;
            "knight-tab": LocalJSX.KnightTab & JSXBase.HTMLAttributes<HTMLKnightTabElement>;
            "portrait-image": LocalJSX.PortraitImage & JSXBase.HTMLAttributes<HTMLPortraitImageElement>;
            "portrait-settings": LocalJSX.PortraitSettings & JSXBase.HTMLAttributes<HTMLPortraitSettingsElement>;
            "radio-button-input": LocalJSX.RadioButtonInput & JSXBase.HTMLAttributes<HTMLRadioButtonInputElement>;
            "slider-input": LocalJSX.SliderInput & JSXBase.HTMLAttributes<HTMLSliderInputElement>;
            "weave-tab": LocalJSX.WeaveTab & JSXBase.HTMLAttributes<HTMLWeaveTabElement>;
        }
    }
}
